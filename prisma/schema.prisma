// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                        @id @default(autoincrement())
  email                    String                     @unique
  name                     String?
  password                 String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  cefrLevel                CEFRLevel?
  role                     Role                       @default(USER)
  lastActive               DateTime                   @default(now())
  dailyGoal                Int                        @default(10)
  userWordProgress         UserWordProgress[]
  userGrammarTopicProgress UserGrammarTopicProgress[]
  exerciseSession          ExerciseSession[]
  exercises                Exercise[]

  @@index([email])
}

model Word {
  id                 Int                @id @default(autoincrement())
  word               String
  russianTranslation String
  partOfSpeech       PartOfSpeech
  cefrLevel          CEFRLevel
  sentences          Sentence[]
  userWordProgress   UserWordProgress[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@unique([word, partOfSpeech])
  @@index([cefrLevel])
}

model Sentence {
  id                 Int          @id @default(autoincrement())
  englishSentence    String
  russianTranslation String
  literalTranslation String?
  grammarTopicId     Int
  grammarTopic       GrammarTopic @relation(fields: [grammarTopicId], references: [id], onDelete: Cascade)
  wordId             Int
  word               Word         @relation(fields: [wordId], references: [id], onDelete: Cascade)
  cefrLevel          CEFRLevel
  wordHint           String?
  grammarHint        String?
  generalHint        String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  exercises          Exercise[]

  @@index([cefrLevel])
  @@index([wordId, grammarTopicId])
}

model GrammarTopic {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  description              String?
  cefrLevel                CEFRLevel
  category                 GrammarTopicCategory
  sentences                Sentence[]
  userGrammarTopicProgress UserGrammarTopicProgress[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt

  @@index([cefrLevel, category])
}

model UserWordProgress {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  word           Word      @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId         Int
  createdAt      DateTime  @default(now())
  lastStudied    DateTime  @default(now())
  nextReviewDate DateTime?
  reviewCount    Int       @default(0)
  successCount   Int       @default(0)
  failureCount   Int       @default(0)
  mastery        Float     @default(0) // От 0 до 1

  @@unique([userId, wordId])
  @@index([userId, nextReviewDate])
  @@index([mastery])
}

model UserGrammarTopicProgress {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  grammarTopic   GrammarTopic @relation(fields: [grammarTopicId], references: [id], onDelete: Cascade)
  grammarTopicId Int
  createdAt      DateTime     @default(now())
  lastStudied    DateTime     @default(now())
  nextReviewDate DateTime?
  reviewCount    Int          @default(0)
  successCount   Int          @default(0)
  failureCount   Int          @default(0)
  mastery        Float        @default(0) // От 0 до 1

  @@unique([userId, grammarTopicId])
  @@index([userId, nextReviewDate])
  @@index([mastery])
}

model Exercise {
  id                  Int             @id @default(autoincrement())
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
  sentence            Sentence        @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
  sentenceId          Int
  exerciseSession     ExerciseSession @relation(fields: [exerciseSessionId], references: [id], onDelete: Cascade)
  exerciseSessionId   Int
  createdAt           DateTime        @default(now())
  isCorrect           Boolean         @default(false)
  lastTranslation     String?
  wordCorrect         Boolean         @default(false)
  grammarCorrect      Boolean         @default(false)
  isWordRepetition    Boolean         @default(false)
  isGrammarRepetition Boolean         @default(false)
  usedWordHint        Boolean         @default(false)
  usedGrammarHint     Boolean         @default(false)

  @@unique([userId, sentenceId, exerciseSessionId])
  @@index([userId, isCorrect])
  @@index([createdAt])
}

model ExerciseSession {
  id                 Int        @id @default(autoincrement())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  exercises          Exercise[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  startedAt          DateTime   @default(now())
  endedAt            DateTime?
  exercisesCompleted Int        @default(0)
  correctAnswers     Int        @default(0)
  incorrectAnswers   Int        @default(0)
}

enum PartOfSpeech {
  noun // Существительное
  verb // Глагол
  adjective // Прилагательное
  adverb // Наречие
  pronoun // Местоимение
  preposition // Предлог
  conjunction // Союз
  interjection // Междометие
  determiner // Определитель (артикли, указательные местоимения и т.д.)
  auxiliaryVerb // Вспомогательный глагол
  modalVerb // Модальный глагол
  article // Артикль (определенный и неопределенный)
  numeral // Числительное
  participle // Причастие
  gerund // Герундий
  infinitiveMarker // Частица "to"
}

enum CEFRLevel {
  A0
  A1
  A2
  B1
  B2
  C1Plus @map("C1+")
}

enum GrammarTopicCategory {
  VerbsAndTenses      @map("Verbs & tenses") // Глаголы и времена
  ClausesAndQuestions @map("Clauses & questions") // Предложения и вопросы
  ModalVerbs          @map("Modal verbs") // Модальные глаголы
  NonfiniteVerbs      @map("Nonfinite verbs") // Нефинитные формы глагола
  Nouns // Существительные
  Adjectives // Прилагательные
  Adverbs // Наречия
  OtherPartsOfSpeech  @map("Other parts of speech") // Другие части речи
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
